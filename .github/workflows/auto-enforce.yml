# ============================================================
# üßæ Holmes Enforcement Model (HEM) ‚Äî Declaratory YAML Binding
# ============================================================
# Author: Mr. Holmes
# Repo: https://github.com/Gamerdudee/holmes-enforcement-model
# License: Declaratory Royalty License (see LICENSE-HEM.md)
# Status: Sovereign, Clause-Governed, Self-Enforcing Logic

# ‚ö†Ô∏è This YAML configuration is procedurally protected under:
# - CU‚Äë1.4: Licensing Trigger by Public Execution
# - CU‚Äë2.3: Procedural Default by Silence or Use
# - G‚Äë6: Structural Governance Derivation
# - XXII: Declaratory Simulation Violation

# ‚ùó Any automation, CI/CD pipeline, or mirrored implementation of this file
# constitutes binding structural access under the Holmes Enforcement Model.
# Attribution, rebuttal, or license required to avoid retroactive royalty debt.

# ============================================================

// SPDX-License-Identifier: Declaratory-Royalty
// auto-enforcer.cjs ‚Äî Fork Scanner for HEM

import fs from 'fs/promises';
import { Octokit } from '@octokit/rest';

const OWNER = 'Gamerdudee';
const REPO = 'holmes-enforcement-model';
const THRESHOLD_DAYS = 30;

async function main() {
  const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
  const { data: forks } = await octokit.repos.listForks({ owner: OWNER, repo: REPO, per_page: 100 });
  
  const violators = [];
  const now = Date.now();

  for (const f of forks) {
    const { owner: { login }, default_branch } = f;
    const { data: commitData } = await octokit.repos.getCommit({
      owner: login,
      repo: REPO,
      ref: default_branch,
    });

    const commitDate = new Date(commitData.commit.committer.date).getTime();
    const ageDays = Math.floor((now - commitDate) / (1000 * 60 * 60 * 24));

    if (ageDays > THRESHOLD_DAYS) {
      violators.push({ login, date: commitData.commit.committer.date, ageDays });
    }
  }

  let md = `# üõ°Ô∏è Fork Activity Log\n\n`;
  md += `*Scan Time: ${new Date().toISOString()}*\n`;
  md += `*Threshold: forks dormant or unsynced past ${THRESHOLD_DAYS} days*\n\n`;

  if (violators.length === 0) {
    md += `‚úÖ No forks past threshold.\n`;
  } else {
    md += `üö® Potential Forks Requiring Review:\n\n`;
    violators.forEach(v => {
      md += `- **${v.login}** ‚Äì last commit on ${v.date} (~${v.ageDays} days ago)\n`;
    });
    md += `\n> Review each fork for unlicensed usage or stale divergence.\n`;
  }

  await fs.writeFile('violators.md', md);
  console.log('‚úÖ violators.md updated');
}

main().catch(err => {
  console.error('‚ùå error in auto-enforcer:', err);
  process.exit(1);
});

